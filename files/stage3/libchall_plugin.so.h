/*
   This file has been generated by IDA.
   It contains local type definitions from
   the type library 'libchall_plugin.so'
*/

#define __int8 char
#define __int16 short
#define __int32 int
#define __int64 long long

struct sockaddr;

/* 1 */
struct __attribute__((aligned(8))) Elf64_Sym
{
  unsigned __int32 st_name;
  unsigned __int8 st_info;
  unsigned __int8 st_other;
  unsigned __int16 st_shndx;
  unsigned __int64 st_value;
  unsigned __int64 st_size;
};

/* 2 */
struct Elf64_Rela
{
  unsigned __int64 r_offset;
  unsigned __int64 r_info;
  __int64 r_addend;
};

/* 3 */
struct Elf64_Dyn
{
  unsigned __int64 d_tag;
  unsigned __int64 d_un;
};

/* 4 */
struct __attribute__((aligned(4))) Elf64_Verneed
{
  unsigned __int16 vn_version;
  unsigned __int16 vn_cnt;
  unsigned __int32 vn_file;
  unsigned __int32 vn_aux;
  unsigned __int32 vn_next;
};

/* 5 */
struct __attribute__((aligned(4))) Elf64_Vernaux
{
  unsigned __int32 vna_hash;
  unsigned __int16 vna_flags;
  unsigned __int16 vna_other;
  unsigned __int32 vna_name;
  unsigned __int32 vna_next;
};

/* 8 */
typedef unsigned int __socklen_t;

/* 7 */
typedef __socklen_t socklen_t;

/* 6 */
struct addrinfo
{
  int ai_flags;
  int ai_family;
  int ai_socktype;
  int ai_protocol;
  socklen_t ai_addrlen;
  sockaddr *ai_addr;
  char *ai_canonname;
  addrinfo *ai_next;
};

/* 10 */
typedef unsigned __int16 sa_family_t;

/* 9 */
struct sockaddr
{
  sa_family_t sa_family;
  char sa_data[14];
};

/* 11 */
struct __va_list_tag
{
  unsigned int gp_offset;
  unsigned int fp_offset;
  void *overflow_arg_area;
  void *reg_save_area;
};

/* 12 */
typedef __va_list_tag gcc_va_list[1];

/* 13 */
union __attribute__((aligned(8))) __m64
{
  unsigned __int64 m64_u64;
  float m64_f32[2];
  __int8 m64_i8[8];
  __int16 m64_i16[4];
  __int32 m64_i32[2];
  __int64 m64_i64;
  unsigned __int8 m64_u8[8];
  unsigned __int16 m64_u16[4];
  unsigned __int32 m64_u32[2];
};

/* 14 */
union __attribute__((aligned(16))) __m128
{
  float m128_f32[4];
  unsigned __int64 m128_u64[2];
  __int8 m128_i8[16];
  __int16 m128_i16[8];
  __int32 m128_i32[4];
  __int64 m128_i64[2];
  unsigned __int8 m128_u8[16];
  unsigned __int16 m128_u16[8];
  unsigned __int32 m128_u32[4];
};

/* 15 */
struct __m128d
{
  double m128d_f64[2];
};

/* 16 */
union __attribute__((aligned(16))) __m128i
{
  __int8 m128i_i8[16];
  __int16 m128i_i16[8];
  __int32 m128i_i32[4];
  __int64 m128i_i64[2];
  unsigned __int8 m128i_u8[16];
  unsigned __int16 m128i_u16[8];
  unsigned __int32 m128i_u32[4];
  unsigned __int64 m128i_u64[2];
};

/* 17 */
union __attribute__((aligned(32))) __m256
{
  float m256_f32[8];
};

/* 18 */
union __attribute__((aligned(32))) __m256d
{
  double m256d_f64[4];
};

/* 19 */
union __attribute__((aligned(32))) __m256i
{
  __int8 m256i_i8[32];
  __int16 m256i_i16[16];
  __int32 m256i_i32[8];
  __int64 m256i_i64[4];
  unsigned __int8 m256i_u8[32];
  unsigned __int16 m256i_u16[16];
  unsigned __int32 m256i_u32[8];
  unsigned __int64 m256i_u64[4];
};

/* 20 */
enum vlc_module_properties
{
  VLC_MODULE_CREATE = 0x0,
  VLC_CONFIG_CREATE = 0x1,
  VLC_MODULE_CPU_REQUIREMENT = 0x100,
  VLC_MODULE_SHORTCUT = 0x101,
  VLC_MODULE_CAPABILITY = 0x102,
  VLC_MODULE_SCORE = 0x103,
  VLC_MODULE_CB_OPEN = 0x104,
  VLC_MODULE_CB_CLOSE = 0x105,
  VLC_MODULE_NO_UNLOAD = 0x106,
  VLC_MODULE_NAME = 0x107,
  VLC_MODULE_SHORTNAME = 0x108,
  VLC_MODULE_DESCRIPTION = 0x109,
  VLC_MODULE_HELP = 0x10A,
  VLC_MODULE_TEXTDOMAIN = 0x10B,
  VLC_CONFIG_NAME = 0x1000,
  VLC_CONFIG_VALUE = 0x1001,
  VLC_CONFIG_RANGE = 0x1002,
  VLC_CONFIG_ADVANCED = 0x1003,
  VLC_CONFIG_VOLATILE = 0x1004,
  VLC_CONFIG_PERSISTENT_OBSOLETE = 0x1005,
  VLC_CONFIG_PRIVATE = 0x1006,
  VLC_CONFIG_REMOVED = 0x1007,
  VLC_CONFIG_CAPABILITY = 0x1008,
  VLC_CONFIG_SHORTCUT = 0x1009,
  VLC_CONFIG_OLDNAME_OBSOLETE = 0x100A,
  VLC_CONFIG_SAFE = 0x100B,
  VLC_CONFIG_DESC = 0x100C,
  VLC_CONFIG_LIST_OBSOLETE = 0x100D,
  VLC_CONFIG_ADD_ACTION_OBSOLETE = 0x100E,
  VLC_CONFIG_LIST = 0x100F,
  VLC_CONFIG_LIST_CB = 0x1010,
};

/* 21 */
enum config_hint
{
  CONFIG_HINT_CATEGORY = 0x2,
  CONFIG_HINT_USAGE = 0x5,
  CONFIG_CATEGORY = 0x6,
  CONFIG_SUBCATEGORY = 0x7,
  CONFIG_SECTION = 0x8,
  CONFIG_ITEM_FLOAT = 0x20,
  CONFIG_ITEM_INTEGER = 0x40,
  CONFIG_ITEM_RGB = 0x41,
  CONFIG_ITEM_BOOL = 0x60,
  CONFIG_ITEM_STRING = 0x80,
  CONFIG_ITEM_PASSWORD = 0x81,
  CONFIG_ITEM_KEY = 0x82,
  CONFIG_ITEM_MODULE = 0x84,
  CONFIG_ITEM_MODULE_CAT = 0x85,
  CONFIG_ITEM_MODULE_LIST = 0x86,
  CONFIG_ITEM_MODULE_LIST_CAT = 0x87,
  CONFIG_ITEM_LOADFILE = 0x8C,
  CONFIG_ITEM_SAVEFILE = 0x8D,
  CONFIG_ITEM_DIRECTORY = 0x8E,
  CONFIG_ITEM_FONT = 0x8F,
};

/* 22 */
struct __attribute__((packed)) __attribute__((aligned(4))) context
{
  void *keyhost;
  char *keyport;
  _DWORD fd;
  _BYTE gap14[4];
  char *url;
  char *username;
  char *password;
  _BYTE permcheck;
  _BYTE gap31[7];
  void *dlhandle;
  int (__fastcall *useVM)(char *, char *);
  int (__fastcall *getPerms)(int64_t *);
  int (__fastcall *getIdent)(int *);
  void *access_ctx;
  char mutex[40];
  _BYTE byte88;
};

/* 23 */
struct access_state
{
  void *access_obj;
  char c8;
  char c9;
  char c10;
  char c11;
  char c12;
  char c13;
  char c14;
  char c15;
  void *c16;
  void *c24;
  int c32;
  char c36;
  char c37;
  char c38;
  char c39;
  char c40;
  char c41;
  char c42;
  char c43;
  char c44;
  char c45;
  char c46;
  char c47;
  char c48;
  char c49;
  char c50;
  char c51;
  char c52;
  char c53;
  char c54;
  char c55;
  __int64 c56;
  char c64;
  char c65;
  char c66;
  char c67;
  char c68;
  char c69;
  char c70;
  char c71;
  char c72;
  char c73;
  char c74;
  char c75;
  char c76;
  char c77;
  char c78;
  char c79;
  char c80;
  char c81;
  char c82;
  char c83;
  char c84;
  char c85;
  char c86;
  char c87;
  char c88;
  char c89;
  char c90;
  char c91;
  char c92;
  char c93;
  char c94;
  char c95;
  char c96;
  char c97;
  char c98;
  char c99;
  char c100;
  char c101;
  char c102;
  char c103;
  char c104;
  char c105;
  char c106;
  char c107;
  char c108;
  char c109;
  char c110;
  char c111;
  char c112;
  char c113;
  char c114;
  char c115;
  char c116;
  char c117;
  char c118;
  char c119;
  char c120;
  char c121;
  char c122;
  char c123;
  char c124;
  char c125;
  char c126;
  char c127;
  char c128;
  char c129;
  char c130;
  char c131;
  char c132;
  char c133;
  char c134;
  char c135;
  char c136;
  char c137;
  char c138;
  char c139;
  char c140;
  char c141;
  char c142;
  char c143;
  char c144;
  char c145;
  char c146;
  char c147;
  char c148;
  char c149;
  char c150;
  char c151;
  char c152;
  char c153;
  char c154;
  char c155;
  char c156;
  char c157;
  char c158;
  char c159;
  char c160;
  char c161;
  char c162;
  char c163;
  char c164;
  char c165;
  char c166;
  char c167;
  char c168;
  char c169;
  char c170;
  char c171;
  char c172;
  char c173;
  char c174;
  char c175;
  char c176;
  char c177;
  char c178;
  char c179;
  char c180;
  char c181;
  char c182;
  char c183;
  char c184;
  char c185;
  char c186;
  char c187;
  char c188;
  char c189;
  char c190;
  char c191;
  char c192;
  char c193;
  char c194;
  char c195;
  char c196;
  char c197;
  char c198;
  char c199;
  char c200;
  char c201;
  char c202;
  char c203;
  char c204;
  char c205;
  char c206;
  char c207;
  char c208;
  char c209;
  char c210;
  char c211;
  char c212;
  char c213;
  char c214;
  char c215;
  char c216;
  char c217;
  char c218;
  char c219;
  char c220;
  char c221;
  char c222;
  char c223;
};

/* 24 */
struct emsg
{
  char buf[16];
  int ident;
};

